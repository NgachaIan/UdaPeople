version: 2.1
orbs:
  aws-cli: circleci/aws-cli@2.0.3
  node: circleci/node@3.0.0
  
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
          
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            
            aws cloudformation delete-stack --stack-name frontend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name backend-<<parameters.workflow_id>>
            
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build

      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build

      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
      
    steps:
      - checkout
      - restore_cache:
          key: frontend-build

      - run:
          name: frontend tests
          command: |
            cd frontend
            npm install
            npm run test
                         
  test-backend:
    docker:
      - image: circleci/node:13.8.0 
    steps:
      - checkout
      - restore_cache:
          key: backend-build

      - run:
          name: backend tests
          command: |
            cd backend
            npm install
            npm run test   

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0  
    steps:
      - checkout
      - restore_cache:
          key: frontend-build

      - run:
          name: frontend scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical 

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          key: backend-build

      - run:
          name: backend scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
    
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install Tar 
          command: |
            yum -y install tar gzip jq git
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"\
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"\
              --tags Name=backend-${CIRCLE_WORKFLOW_ID:0:7} 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"\
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags Name=frontend-${CIRCLE_WORKFLOW_ID:0:7} 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> ~/project/.circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
                --request PUT \
                --data `aws ec2 describe-instances \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --output text` \
                https://api.memstash.io/values/backendip
            
              
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt   
      # Here's where you will add some code to rollback on failure   
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"   

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ['fe:e6:f7:ac:dd:f5:da:7e:50:c6:fd:47:bf:4e:35:27:6f:73:1c:ff']
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            cat .circleci/ansible/inventory.txt 

      - run:
          name: Configure server
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            
              cd .circleci/ansible
              cat inventory.txt
              ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"   
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: prepare environment for backend build
          command: |
            cat \<< EOF > backend/.env
            ENVIRONMENT=production
            VERSION=1
            TYPEORM_CONNECTION=postgres
            TYPEORM_HOST=postgres.cvn4b3rvb5sy.us-east-1.rds.amazonaws.com
            TYPEORM_PORT=5432
            TYPEORM_USERNAME=postgres
            TYPEORM_PASSWORD=password
            TYPEORM_DATABASE=postgres
            TYPEORM_MIGRATIONS=./src/migrations/*.ts
            TYPEORM_ENTITIES=./src/modules/**/*.entity.ts
            EOF
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y awscli
      - run:
          name: Run migrations
          command: | 
            cd backend
            npm install
            npm run build
            npm run migrations > migrations_dump.txt

      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -H "Content-Type: text/plain" -H "token: a2d26416-e9b8-4ee8-a3c2-35aeb1c9e382" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi

      - persist_to_workspace:
          root: ~/project
          paths:
            - backend

      - revert-migrations
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"
      

     
     # Here's where you will add some code to rollback on failure
        

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.7-alpine3.11 
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install AWS CLI dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm i
      - run:
          name: Get backend url
          command: |
        
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request GET https://api.memstash.io/values/backendip)

            export API_URL="http://${BACKEND_IP}:3030"

            
            echo ENVIRONMENT=production > "frontend/.env"
            echo NODE_ENV=production >> "frontend/.env"
            echo API_URL=$API_URL >> "frontend/.env"
           
            echo "${API_URL}"

      - run:
          name: Deploy frontend objects
          command: |
            echo ENVIRONMENT=production >> frontend/.env
            echo NODE_ENV=production >> frontend/.env
            cd frontend
            npm audit fix --audit-level=critical 
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure 
      - revert-migrations 
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"    
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11 
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ['fe:e6:f7:ac:dd:f5:da:7e:50:c6:fd:47:bf:4e:35:27:6f:73:1c:ff']
      - restore_cache:
          key: backend-build
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add --update ansible openssh-client tar nodejs npm
            pip install awscli
     
      - run:
          name: Deploy backend
          command: |
            echo ENVIRONMENT=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env

            tar -C backend -czvf artifact.tar.gz .
            ls -la

            cd .circleci/ansible
            cat inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      - revert-migrations
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.11 
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            pip install awscli
            apk add --update curl nodejs npm
     
      - run:
          name: Backend smoke test
          command: |
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request GET https://api.memstash.io/values/backendip)

            export BACKEND_STATUS="http://${BACKEND_IP}:3030/api/status"
            echo ${BACKEND_STATUS}
            curl "http://${BACKEND_IP}:3030/api/status"

      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            curl -s "${URL}"

      - revert-migrations
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"

      # Here's where you will add some code to rollback on failure  
  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.7-alpine3.11 
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update curl npm  && pip3 install --upgrade pip && pip3 install awscli
      - run:
          name: Save the ID of the actual stack
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
              
            curl -H "Content-Type: text/plain" \
              -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
              --request PUT --data "$OldWorkflowID" \
              https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID:0:7}
            
            export FetchID=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
              --request GET https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID:0:7})
            echo "FetchID: ${FetchID}"
      - run:
          name: Update cloudfront distribution
          command: |
            # Change the initial stack name, as applicable to you
            aws cloudformation deploy \
                    --template-file .circleci/files/cloudfront.yml \
                    --stack-name InitialStack \
                    --region eu-central-1 \
                    --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
                    --tags project=udapeople
      - revert-migrations
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"

  cleanup:
      docker:
        # Docker image here
        - image: python:3.7-alpine3.11 
      steps:
        # Checkout code from git
        - checkout
        - run:
            name: Install dependencies
            command: |
              # your code here
              apk add --update curl npm  && pip3 install --upgrade pip && pip3 install awscli
        - run:
            name: Fetch OldStack Workflow ID
            command: |
              # Fetch the Old workflow ID
              # Fetch the Old workflow ID
              export OldWorkflowID=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
              --request GET https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID:0:7})
              echo OldWorkflowID: "${OldWorkflowID}"
              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
        - run:
            name: Remove old stacks and files
            command: |
              export OldWorkflowID=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
              --request GET https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID:0:7})
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]; then
                aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --force --region=$AWS_REGION
                aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
              else
                echo "Fresh Stacks"
              fi
              
        - revert-migrations
      
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: 
            - build-frontend
      - test-backend:
          requires: 
            - build-backend
      - scan-frontend:
          requires: 
            - build-frontend
      - scan-backend:
          requires: 
            - build-backend
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
